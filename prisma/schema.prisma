generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id

  username    String  @unique
  avatar      String?
  cover       String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?

  posts                  Post[]
  likes                  Like[]
  comments               Comment[]
  followers              Follower[]      @relation("UserFollowers")
  followings             Follower[]      @relation("UserFollowings")
  followRequestsSent     FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks                 Block[]         @relation("BlocksSent")
  blockedBy              Block[]         @relation("BlocksReceived")
  stories                Story[]

  createdAt DateTime @default(now())
}

model Post {
  id Int @id @default(autoincrement())

  desc String
  img  String?

  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())

  desc String

  userId String
  postId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id Int @id @default(autoincrement())

  userId    String
  postId    Int?
  commentId Int?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  Comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Follower {
  id Int @id @default(autoincrement())

  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model FollowRequest {
  id Int @id @default(autoincrement())

  senderId   String
  receiverId String

  sender   User @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([senderId, receiverId])
}

model Block {
  id Int @id @default(autoincrement())

  blockerId String
  blockedId String

  blocker User @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Story {
  id Int @id @default(autoincrement())

  userId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  expiresAt DateTime
}
